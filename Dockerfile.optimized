# Multi-stage build for size optimization
FROM python:3.11-slim-bullseye as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install minimal system dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    supervisor \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install Ollama (lightweight)
RUN curl -fsSL https://ollama.com/install.sh | sh

# Stage 2: Dependencies
FROM base as dependencies

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Optimize Python dependencies installation
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip cache purge && \
    find /usr/local/lib/python3.11/site-packages -name "*.pyc" -delete && \
    find /usr/local/lib/python3.11/site-packages -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Stage 3: Final image
FROM base as final

WORKDIR /app

# Copy Python dependencies from previous stage
COPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# Copy application files (minimal)
COPY src/ ./src/
COPY requirements.txt ./
COPY setup.sh health_check.sh setup-ollama.sh ./

# Copy docker configs
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/entrypoint.sh /entrypoint.sh

# Create directories and set permissions
RUN mkdir -p /etc/supervisor/conf.d logs temp data/backups /usr/share/ollama/.ollama && \
    chown -R appuser:appuser /app /usr/share/ollama && \
    chmod +x setup.sh health_check.sh setup-ollama.sh /entrypoint.sh

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8501 || exit 1

# Expose ports
EXPOSE 8501 11434

# Start command
ENTRYPOINT ["/entrypoint.sh"]
